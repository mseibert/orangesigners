---
// Kontaktformular-Komponente
export interface Props {
  fromMailAddress?: string;
  replyToAddress?: string;
  formMailSubject?: string;
  emailBodyText?: string;
  customerEmailBodyText?: string;
}

const {
  fromMailAddress = 'musik@oranienschule.de',
  replyToAddress = 'musik@oranienschule.de',
  formMailSubject = 'Kontaktformular von Orange Singers Website',
  emailBodyText = 'Dieses Formular wurde hier ausgefüllt: {ReferrerURL}\n\nVon: {SubmitterMailAddress}\nNachricht: {Message}',
  customerEmailBodyText = 'Jemand hat ein Kontaktformular auf der Orange Singers Website hier ausgefüllt: {ReferrerURL}\n\nE-Mail-Adresse: {SubmitterMailAddress}\nNachricht: {Message}\n\nDies ist eine automatische Nachricht von der Orange Singers Website. Falls du das Formular nicht ausgefüllt hast, kannst du diese E-Mail ignorieren. Bei Fragen kontaktiere uns bitte unter musik@oranienschule.de.'
} = Astro.props;
---

<div class="bg-white rounded-lg shadow-lg p-6 border-2" style="border-color: #f08300;">
  <h3 class="font-bold text-xl mb-4 border-b-2 pb-2" style="color: #f08300; border-color: #f08300;">
    Schreib eine Nachricht
  </h3>
  
  <form id="contactForm" class="space-y-4" enctype="multipart/form-data">
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
        Deine E-Mail-Adresse *
      </label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:border-transparent"
        style="focus:ring-color: #f08300;"
        placeholder="deine.email@beispiel.de"
      >
    </div>
    
    <div>
      <label for="message" class="block text-sm font-medium text-gray-700 mb-1">
        Deine Nachricht *
      </label>
      <textarea
        id="message"
        name="message"
        required
        rows="2"
        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:border-transparent resize-vertical"
        style="focus:ring-color: #f08300;"
        placeholder="Schreib uns, was du uns mitteilen möchtest..."
      ></textarea>
    </div>
    
    <div>
      <button
        type="button"
        id="toggleAttachmentBtn"
        class="text-sm font-medium text-gray-600 hover:text-gray-800 transition-colors duration-200 flex items-center gap-2"
        style="color: #f08300;"
      >
        <svg id="attachmentIcon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
        </svg>
        Datei anhängen (optional)
      </button>
      
      <div id="attachmentSection" class="hidden mt-3">
        <label for="attachments" class="block text-sm font-medium text-gray-700 mb-1">
          Anhang (bis zu 10 MB)
        </label>
        <input
          type="file"
          id="attachments"
          name="attachments"
          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:border-transparent"
          style="focus:ring-color: #f08300;"
          accept=".pdf,.jpg,.jpeg,.png,.heic,.heif,.docx"
        >
      </div>
    </div>

    <button
      type="submit"
      id="submitBtn"
      class="w-full py-3 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-300 font-medium text-lg shadow-md"
      style="background-color: #f08300; color: white;"
      onmouseover="this.style.backgroundColor='#e07400'"
      onmouseout="this.style.backgroundColor='#f08300'"
    >
      Nachricht senden
    </button>
  </form>
  
  <div id="formMessage" class="mt-4 hidden">
    <div id="successMessage" class="hidden bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
      <p id="successText"></p>
    </div>
    <div id="errorMessage" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
      <p id="errorText"></p>
    </div>
  </div>
</div>

<style>
  input:focus, textarea:focus {
    outline: none;
    border-color: #f08300;
    box-shadow: 0 0 0 2px rgba(240, 131, 0, 0.2);
  }
</style>

<script define:vars={{ fromMailAddress, replyToAddress, formMailSubject, emailBodyText, customerEmailBodyText }}>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contactForm');
    const submitBtn = document.getElementById('submitBtn');
    const formMessage = document.getElementById('formMessage');
    const successMessage = document.getElementById('successMessage');
    const errorMessage = document.getElementById('errorMessage');
    const successText = document.getElementById('successText');
    const errorText = document.getElementById('errorText');
    const attachmentsInput = document.getElementById('attachments');
    const toggleAttachmentBtn = document.getElementById('toggleAttachmentBtn');
    const attachmentSection = document.getElementById('attachmentSection');
    const attachmentIcon = document.getElementById('attachmentIcon');

    function showMessage(message, isSuccess) {
      formMessage.classList.remove('hidden');
      successMessage.classList.add('hidden');
      errorMessage.classList.add('hidden');
      
      if (isSuccess) {
        successText.textContent = message;
        successMessage.classList.remove('hidden');
      } else {
        errorText.textContent = message;
        errorMessage.classList.remove('hidden');
      }
    }

    function hideMessage() {
      formMessage.classList.add('hidden');
    }

    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const email = formData.get('email');
      const message = formData.get('message');
      
      const files = attachmentsInput && attachmentsInput.files ? Array.from(attachmentsInput.files) : [];

      // einfache Validierung: Gesamtgröße <= 10 MB, max 1 Datei
      const maxTotalSize = 10 * 1024 * 1024;
      const maxFiles = 1;
      const allowedFormats = ['.pdf', '.jpg', '.jpeg', '.png', '.heic', '.heif', '.docx'];
      
      const totalSize = files.reduce((sum, f) => sum + f.size, 0);
      if (files.length > maxFiles) {
        showMessage(`Bitte maximal ${maxFiles} Datei auswählen.`, false);
        return;
      }
      if (totalSize > maxTotalSize) {
        showMessage('Die Dateigröße des Anhangs überschreitet 10 MB.', false);
        return;
      }
      
      // Dateiformat-Validierung
      for (const file of files) {
        const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
        if (!allowedFormats.includes(fileExtension)) {
          showMessage(`Das Dateiformat ${fileExtension} ist nicht erlaubt. Erlaubte Formate: PDF, JPG, PNG, HEIC, DOCX`, false);
          return;
        }
      }

      // Referrer URL ermitteln
      const referrerURL = document.referrer || window.location.href;
      
      // Button deaktivieren und Text ändern
      submitBtn.disabled = true;
      submitBtn.textContent = 'Wird gesendet...';
      
      try {
        const requestFormData = new FormData();
        requestFormData.append('email', email);
        requestFormData.append('message', message);
        requestFormData.append('referrerURL', referrerURL);
        requestFormData.append('fromMailAddress', fromMailAddress);
        requestFormData.append('replyToAddress', replyToAddress);
        requestFormData.append('formMailSubject', formMailSubject);
        requestFormData.append('emailBodyText', emailBodyText);
        requestFormData.append('customerEmailBodyText', customerEmailBodyText);
        if (files.length === 1) {
          requestFormData.append('attachments', files[0], files[0].name);
        }

        const response = await fetch('/api/contact', {
          method: 'POST',
          body: requestFormData
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage(result.message, true);
          form.reset();
        } else {
          showMessage(result.message, false);
        }
      } catch (error) {
        showMessage('Es gab einen Fehler beim Senden deiner Nachricht. Bitte versuche es später erneut.', false);
      } finally {
        // Button wieder aktivieren
        submitBtn.disabled = false;
        submitBtn.textContent = 'Nachricht senden';
      }
    });

    // Nachricht ausblenden, wenn Benutzer erneut tippt
    const inputs = form.querySelectorAll('input, textarea');
    inputs.forEach(input => {
      input.addEventListener('input', hideMessage);
    });

    // Attachment Toggle Funktionalität
    toggleAttachmentBtn.addEventListener('click', function() {
      const isHidden = attachmentSection.classList.contains('hidden');
      
      if (isHidden) {
        attachmentSection.classList.remove('hidden');
        attachmentIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>';
        toggleAttachmentBtn.innerHTML = '<svg id="attachmentIcon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg> Anhang ausblenden';
      } else {
        attachmentSection.classList.add('hidden');
        attachmentIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>';
        toggleAttachmentBtn.innerHTML = '<svg id="attachmentIcon" class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path></svg> Datei anhängen (optional)';
        // Datei-Input zurücksetzen, wenn ausgeblendet
        if (attachmentsInput) {
          attachmentsInput.value = '';
        }
      }
    });
  });
</script>
